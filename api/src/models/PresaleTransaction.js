"use strict";

const { Schema, Types, model } = require("mongoose");
const { MODEL: NAME, COLLECTION, TIMESTAMPS, PRESALE_TRANSACTION_STATUS } = require("@src/constants");
const { assert: { isNumeric } } = require("@src/utils");

// ------------------------- Presale Transactions Schema -----------------------------

const SCHEMA = new Schema(
  {
    presale_user_id: {
      type: Types.ObjectId,
      required: true,
      ref: NAME.PRESALE_USER,
    },
    user_id: {
      type: Types.ObjectId,
      required: true,
      ref: NAME.USER,
    },
    status: {
      type: String,
      enum: Object.values(PRESALE_TRANSACTION_STATUS),
      default: PRESALE_TRANSACTION_STATUS.PENDING,
    },
    amount_in_usd: { // The amount user wants to get the token for in USD
      type: Schema.Types.Decimal128,
      required: true,
      validate: isNumeric,
      get(value) {
        return value?.toString();
      },
      set(value) {
        return Types.Decimal128.fromString(value);
      },
    },
    bxt_base_price: { // The base price of BXT at the time of purchase
      type: Schema.Types.Decimal128,
      required: true,
      validate: isNumeric,
      get(value) {
        return value?.toString();
      },
      set(value) {
        return Types.Decimal128.fromString(value);
      },
    },
    blockchain_transaction_id: { // Provided by user after submitting on-chain transaction
      type: String,
    },
    blockchain: { // Blockchain user has selected for payment
      type: String,
      required: true,
    },
    deposit_address: { // Blockchain user has selected for payment
      type: String,
      required: true,
    },
    payment_coin: { // The coin user has chosen for purchasing tokens
      type: String,
      required: true,
    },
    payment_screenshot: { // Screenshot of the payment proof
      type: String,
    },
    tokens_allocation: { // Number of tokens bought by the user
      discounted: {
        type: Number, //100
        required: true,
      },
      base: {
        type: Number, // 2000
        required: true,
      },
      total: {
        type: Number, // 2100
        required: true,
      },
    },
    presale_stage: { // The stage of the presale transaction
      type: Number,
      required: true,
    },
    transaction_number: { // Unique ID number generated by Bxlend
      unique: true,
      type: String,
      required: true,
    },
    coin_price_at_order_time: { // The price of the coin selected by the user at the time of order
      coin_price: { // The price of the coin selected by the user at the time of order 
        type: Number,
        required: true
      },
      converted_price: { // The converted price in the selected coin at the time of order, 
        type: Number,
        required: true
      }
    }
  },
  {
    collection: COLLECTION.PRESALE_TRANSACTION,
    timestamps: TIMESTAMPS,
  }
);

// ------------------------- Static Methods -------------------------

SCHEMA.static({
  /**
   * Serialize a presale transaction object.
   *
   * @memberOf MODEL
   * @param {Object} transaction
   * @returns {Object}
   */
  serialize(transaction) {
    const {
      _id,
      presale_user_id,
      user_id,
      status,
      deposit_address,
      amount_in_usd,
      bxt_base_price,
      blockchain_transaction_id,
      blockchain,
      payment_coin,
      payment_screenshot,
      tokens_allocation,
      presale_stage,
      transaction_number,
      createdAt,
      updatedAt,
    } = transaction;

    return {
      id: _id,
      presale_user_id,
      user_id,
      status,
      deposit_address,
      amount_in_usd,
      bxt_base_price,
      blockchain_transaction_id,
      blockchain,
      payment_coin,
      payment_screenshot,
      tokens_allocation,
      presale_stage,
      transaction_number,
      createdAt,
      updatedAt,
    };
  },

  /**
   * Returns fields that can be selected by query parameters.
   *
   * @returns {string[]}
   */
  getSelectableFields() {
    return [
      "id",
      "presale_user_id",
      "user_id",
      "status",
      "deposit_address",
      "amount_in_usd",
      "bxt_base_price",
      "blockchain_transaction_id",
      "blockchain",
      "payment_coin",
      "tokens_allocation",
      "presale_stage",
      "transaction_number",
      "createdAt",
      "updatedAt",
    ];
  },
});

SCHEMA.method({
  /**
   * Serialize presale transaction object.
   *
   * @memberOf SCHEMA.prototype
   * @returns {Object}
   */
  serialize() {
    return MODEL.serialize(this);
  },
});

// ------------------------- toJSON Transformation -------------------------

SCHEMA.set("toJSON", {
  /**
   * Serialize the presale transaction object when converting to JSON.
   *
   * @param {SCHEMA} doc
   * @returns {Object}
   */
  transform(doc) {
    return doc.serialize();
  },
});

// ------------------------- Model Export -------------------------

const MODEL = model(NAME.PRESALE_TRANSACTION, SCHEMA);

module.exports = MODEL;
